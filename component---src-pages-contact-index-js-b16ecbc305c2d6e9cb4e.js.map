{"version":3,"sources":["webpack:///./src/styles/get-a-quote/styledComponents.js","webpack:///./src/pages/contact/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/bigGreyImage/styledComponents.js","webpack:///./src/components/bigGreyImage/index.js"],"names":["SectionContainer","styled","section","withConfig","displayName","componentId","breakpoint","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","recaptchaRef","React","createRef","GetaQuote","state","name","replyto","phone","message","send","showAlert","typeAlert","alertMessage","titleAlert","handleChange","event","_this$setState","_event$target","target","value","_this","setState","closeAlert","validateForm","_this$state","validateEmail","handleSubmit","e","preventDefault","current","execute","onChange","comp","assertThisInitialized_default","t","props","_this$state2","opts","subject","axios","post","headers","Accept","then","response","grecaptcha","reset","catch","error","email","test","String","toLowerCase","render","_this2","this","_this$props","data","_this$state3","isInValidName","isInValidMessage","showErrorEmail","emailValidationMessage","react_default","a","createElement","dist_es","i18n","layout","seo","title","keywords","description","bigGreyImage","image","getQuote","childImageSharp","sizes","styledComponents","ref","form","className","method","action","onSubmit","type","id","placeholder","htmlFor","cols","rows","es","size","sitekey","onClick","lib_default","show","text","onConfirm","Component","query","withNamespaces","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","match","MainContainer","div","GreyFilter","BigGreyImage","_ref","gatsby_image_default","propTypes","PropTypes","object","isRequired","string"],"mappings":"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","file":"component---src-pages-contact-index-js-b16ecbc305c2d6e9cb4e.js","sourcesContent":["import styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint';\n\nexport const SectionContainer = styled.section`\n  padding: 2em;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  h3{\n    ${breakpoint('mobile')`\n      font-size: 1.2rem;\n    `}\n    ${breakpoint('tablet')`\n      font-size: 1.5rem;\n    `}\n  }\n  form {\n    display: flex;\n    flex-direction: column;\n    margin-top: 1em;\n    input, textarea {\n      margin: 5px 0px;\n      border-radius: 3px;\n      border: 1px solid #e2e2e2;\n      padding: 8px;\n      padding-left: 10px;\n      font-size: 0.85rem;\n      &:focus{\n        border: 1px solid #f48600;\n        outline: 0;\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(124, 197, 118, 0.3);\n        -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(124, 197, 118, 0.3);\n        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(124, 197, 118, 0.3);\n      }\n    }\n    textarea {\n      min-height: 150px;\n      resize: none;\n    }\n    .input-btn {\n      width: 120px;\n      height: 35px;\n      background: #f48600;\n      border-radius: 4px;\n      color: #ffffff;\n      font-size: 0.85rem;\n      line-height: 0.8rem;\n      text-transform: capitalize;\n      transition: all 0.3s ease-in-out;\n      -moz-transition: all 0.3s ease-in-out;\n      -webkit-transition: all 0.3s ease-in-out;\n      cursor: pointer;\n      &:hover {\n        background: #111;\n        color: #fff;\n      }\n    }\n    label.error {\n      font-weight: normal;\n      color: #d61400;\n      font-size: 14px;\n      font-style: italic;\n      position: relative;\n      top: -4px;\n    }\n    .wrapper_button {\n      display: flex;\n      justify-content: center;\n      padding-top: 1em;\n      ${breakpoint('tablet')`\n        justify-content: flex-start;\n        padding-top: 0;\n      `}\n      button {\n        border: none;\n        transition: all .5s;\n        &:hover {\n          border-color: #F28724;\n          background: #FFA449;\n        }\n        &:focus {\n          outline: none;\n        }\n      }\n    }\n    ${breakpoint('mobile')`\n      width: 100%;\n    `}\n    ${breakpoint('tablet')`\n      width: 600px;\n    `}\n  }\n`;\n","import React, { Component } from 'react'\nimport { graphql } from 'gatsby'\nimport axios from 'axios'\nimport ReCAPTCHA from \"react-google-recaptcha\"\nimport SweetAlert from 'sweetalert2-react'\nimport BigGreyImage from '../../components/bigGreyImage'\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport { I18nextProvider, withNamespaces } from \"react-i18next\"\nimport i18n from '../../data/translations'\n\nimport {\n  H3,\n  PageSizer,\n} from '../../components/styledComponents'\nimport {\n  SectionContainer,\n} from '../../styles/get-a-quote/styledComponents';\nconst recaptchaRef = React.createRef();\nclass GetaQuote extends Component {\n    state = {\n        name: '',\n        replyto: '',\n        phone: '',\n        message: '',\n        send: false,\n        showAlert: false,\n        typeAlert: 'success',\n        alertMessage: '',\n        titleAlert: 'Message',\n    }\n    handleChange = (event) => {\n        const {\n            target: {\n                name,\n                value,\n            }\n        } = event;\n        this.setState({[name]: value});\n    }\n    closeAlert = () => {\n        this.setState({ showAlert: false });\n    }\n    validateForm = () => {\n        const { name, replyto, message } = this.state;\n        if(name === '') return false;\n        if(replyto === '' || !this.validateEmail(replyto)) return false;\n        if(message === '') return false;\n        return true;\n    }\n    handleSubmit = (e) => {\n        this.setState({ send: true});\n  \n        e.preventDefault();\n\n        if(this.validateForm()){\n            recaptchaRef.current.execute();\n        }\n        \n    }\n    onChange = (value) => {\n        const comp = this;\n        const { t } = this.props;\n        const { name, replyto, phone, message } = this.state;\n        if(value) {\n            const opts = {\n                subject: 'Tell us about your project', \n                name,\n                replyto,\n                phone,\n                message,\n            };\n            axios.post(\n                \"https://submit-form.com/BXef95h140v6_B6pU1irm\", \n                opts, \n                {headers: {\"Accept\": \"application/json\"}}\n            )\n            .then(function (response) {\n                recaptchaRef.current.props.grecaptcha.reset();\n                comp.setState({ send: false, name: '', replyto: '', phone: '', message: '', titleAlert: t('getQuote.form.sentMessage'), typeAlert: 'success', alertMessage: '', showAlert: true, });\n            })\n            .catch(function (error) {\n                recaptchaRef.current.props.grecaptcha.reset();\n                comp.setState({ titleAlert: t('getQuote.form.descriptionError'), typeAlert: 'info', alertMessage: t('getQuote.form.descriptionError'), showAlert: true });\n            });\n        }\n      }\n    \n    validateEmail(email) {\n        var re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        return re.test(String(email).toLowerCase());\n    }\n    render() {\n        const { data, t } = this.props;\n        const { name, send, replyto, message, phone, showAlert, titleAlert, typeAlert, alertMessage } = this.state;\n        const isInValidName = (name === '' && send);\n        const isInValidMessage = (message === '' && send);\n        const showErrorEmail = (replyto !== '' && !this.validateEmail(replyto)) || (replyto === '' && send);\n        const emailValidationMessage = (showErrorEmail && replyto !== '') ? t('getQuote.form.validEmail') : t('getQuote.form.errorEmail');\n        return (\n        <I18nextProvider i18n={i18n}>\n            <Layout>\n                <SEO title=\"Sancrisoft | Get a Quote\" keywords={['sancrisoft', 'digital-solutions', 'get-quote']} description=\"page Contact\" />\n                <section>\n                <BigGreyImage\n                    image={data.getQuote.childImageSharp.sizes}\n                    title={t('getQuote.bigImage.title')}\n                    description={t('getQuote.bigImage.description')}\n                />\n                </section>\n                <PageSizer>\n                <SectionContainer>\n                    <H3>{t('getQuote.form.title')}</H3>\n                    <form  ref={(form) => this.form = form} className=\"form contact_form\"  method=\"POST\" action=\"http://formspree.io/info@sancrisoft.com\" onSubmit={this.handleSubmit}>\n                        <input className=\"input-text\" type=\"text\" name=\"name\" id=\"name\" placeholder={t('getQuote.form.name')} value={name} onChange={this.handleChange}/>\n                        {\n                            (isInValidName) && <label className=\"error\" htmlFor=\"name\">{t('getQuote.form.errorName')}</label>\n                        }\n                        <input className=\"input-text\" type=\"text\" name=\"replyto\" id=\"replyto\" placeholder={t('getQuote.form.email')} value={replyto} onChange={this.handleChange} />\n                        {\n                            (showErrorEmail) && <label className=\"error\" htmlFor=\"replyto\">{emailValidationMessage}</label>\n                        }\n                        <input className=\"input-text\" type=\"text\" name=\"phone\" id=\"phone\" placeholder={t('getQuote.form.phone')} value={phone} onChange={this.handleChange} />\n                        <textarea className=\"input-text text-area\" name=\"message\" id=\"message\" cols=\"0\" rows=\"0\" placeholder={t('getQuote.form.message')} value={message} onChange={this.handleChange}></textarea>\n                        {\n                            (isInValidMessage) && <label className=\"error\" htmlFor=\"message\">{t('getQuote.form.errorMessage')}</label>\n                        }\n                        <input type=\"hidden\" name=\"subject\" value=\"Tell us about your project | SancriSoft\" />\n                        <ReCAPTCHA\n                            ref={recaptchaRef}\n                            size=\"invisible\"\n                            sitekey=\"6LdeBokUAAAAAM01lWglTU0siI1fmMRoGjCE_94b\"\n                            onChange={this.onChange}\n                        />\n                        <div className=\"wrapper_button\">\n                            <button className=\"input-btn\" type=\"button\" onClick={this.handleSubmit}>{t('getQuote.form.send')} </button>\n                        </div>\n                    </form>\n                    <SweetAlert\n                        show={showAlert}\n                        title={titleAlert}\n                        text={alertMessage}\n                        onConfirm={this.closeAlert}\n                        type={typeAlert}\n                        \n                    />\n                </SectionContainer>\n                </PageSizer>\n            </Layout>\n        </I18nextProvider>\n    );\n  }\n}\n\n// Queries for images (One query by image)\nexport const query = graphql`\nquery getaQuoteQuery {\n  getQuote:file(relativePath: { eq: \"get-a-quote/quote.jpg\" }) {\n    ...imageFragment\n  }\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n`;\n\nexport default withNamespaces('translations')(GetaQuote)\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","import styled from 'styled-components'\n\nexport const MainContainer = styled.div`\n  width: 100%;\n  height: 50vh;\n  position: relative;\n  div.detail {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 0;\n    z-index: 3;\n    width: 100%;\n    height: 100%;\n    h2, p {\n      color: white;\n      text-align: center;\n      padding: 0 1em;\n    }\n  }\n  .image-container {\n    width: 100%;\n    height: 100%;\n    img {\n      flex: 1;\n      object-fit: cover;\n      position: absolute;\n      z-index: 1;\n    }\n  }\n`;\n\nexport const GreyFilter = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.55);\n  z-index: 2;\n`;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Img from 'gatsby-image'\nimport {\n  MainContainer,\n  GreyFilter,\n} from './styledComponents'\nimport { H2 } from '../styledComponents'\n\nconst BigGreyImage = ({ title, description, image }) => (\n  <MainContainer>\n    <GreyFilter />\n    <Img className={'image-container'} sizes={image} />\n    <div className=\"detail\">\n      <H2>{title}</H2>\n      <p>{description}</p>\n    </div>\n  </MainContainer>\n);\n\nBigGreyImage.propTypes = {\n  image: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default BigGreyImage\n"],"sourceRoot":""}